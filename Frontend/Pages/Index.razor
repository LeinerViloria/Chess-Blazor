@page "/"
@using ChessAI.Game.Enums
@using ChessAI.Game.Utils
@using ChessAI.Models
@using ChessAI.Services
@using ChessAI.Game
@inject StockfishService StockfishService
@inject DialogService DialogService

<div class="header">
    <h1>Ajedrez - ELECTIVA - 1</h1>
    <RadzenButton Click="@(() => _ = ResetBoard())" Text="Nuevo juego" class="new-game-button" />
</div>

<!-- Spinner overlay, positioned absolutely so it doesn't push the board down -->
@if (isThinking)
{
    <div class="spinner-overlay">
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </div>
}

<div class="chess-board-container">
    <table class="chess-board">
        <!-- Column letters (A-H) at the top and bottom -->
        @RenderColumnLabels()

        <!-- Chessboard with row numbers on the sides -->
        @for (var row = 7; row >= 0; row--)
        {
            <tr>
                <td class="row-label">@GetRowLabel(row)</td> <!-- Row number on the left side -->
                @for (var col = 0; col < 8; col++)
                {
                    var currentRow = row;
                    var currentCol = col;
                    <td class="square @Utilities.GetSquareColorClass(currentRow, currentCol)"
                        ondragover="event.preventDefault();"
                        @ondrop="@(() => DropPiece(currentRow, currentCol))"
                        @ondragover:preventDefault>
                        @if (Board.Pieces[currentRow, currentCol] != null)
                        {
                            <div class="piece @GetPieceColor(Board.Pieces[currentRow, currentCol])"
                                 draggable="true"
                                 @ondragstart="@(() => DragPiece(currentRow, currentCol))"
                                 @ondragend="@DragEnd">
                                <img src="@GetPieceImagePath(Board.Pieces[currentRow, currentCol])" class="chess-piece-img" />
                            </div>
                        }
                    </td>
                }
                <td class="row-label">@GetRowLabel(row)</td> <!-- Row number on the right side -->
            </tr>
        }

        @RenderColumnLabels()
    </table>
</div>

@if (IsGameOver)
{
    <div class="game-over-message">
        @GameOverMessage
    </div>
}

@code {
    private ChessBoard Board { get; set; } = new();
    private GameState State { get; set; } = new();
    private (int Row, int Col)? DraggedPiecePosition { get; set; }
    private bool IsGameOver { get; set; }
    private string GameOverMessage { get; set; } = "";
    private bool isThinking;

    private static readonly string[] ColumnLabels = { "A", "B", "C", "D", "E", "F", "G", "H" };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _ = ResetBoard(true);
        await StockfishService.InitializeEngine();
    }

    private async Task ResetBoard(bool IgnoreDialog = false)
    {
        if (!IsGameOver && !IgnoreDialog)
        {
            var Reset = await DialogService.Confirm("¿Esta seguro de empezar un nuevo juego?", "Reiniciar juego", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" });
            if (Reset is null or false) return;
        }

        Board = new ChessBoard();
        State = new GameState();
        Board.InitializeBoard();
        State.ResetGame();
        IsGameOver = false;
        GameOverMessage = "";
        StateHasChanged();
    }

    private RenderFragment RenderColumnLabels() =>@<tr>
            <td></td>
            @foreach (var col in ColumnLabels)
            {
                <td class="column-label">@col</td>
            }
            <td></td>
        </tr>;

   private string GetRowLabel(int rowIndex) => (8 - rowIndex).ToString();
   private string GetPieceColor(ChessPiece? piece) => 
    piece != null && piece.Color is PieceColor.White ? "white-piece" : "black-piece";

   private string GetPieceImagePath(ChessPiece? piece)
   {
       if (piece == null) return string.Empty;
       var color = piece.Color == PieceColor.White ? "w" : "b";
       var pieceType = piece.Type switch
       {
           PieceType.Pawn => "p",
           PieceType.Rook => "r",
           PieceType.Knight => "n",
           PieceType.Bishop => "b",
           PieceType.Queen => "q",
           PieceType.King => "k",
           _ => throw new ArgumentException("Invalid piece type")
       };
       return $"/images/chess-pieces/{color}{pieceType}.svg";
   }

   private void DragPiece(int row, int col)
   {
       var piece = Board.Pieces[row, col];
       if (Utilities.IsValidDrag(State, piece))
       {
           DraggedPiecePosition = (row, col);
       }
   }

   private void DragEnd()
   {
       DraggedPiecePosition = null;
   }

   

   private async Task DropPiece(int row, int col)
   {
       if (DraggedPiecePosition.HasValue && !IsGameOver)
       {
           var (fromRow, fromCol) = DraggedPiecePosition.Value;
           var piece = Board.Pieces[fromRow, fromCol];

           if (Utilities.IsValidDrag(State, piece))
           {
               var move = new ChessMove(fromRow, fromCol, row, col);
               if (Utilities.IsValidMove(State, Board, move))
               {
                   Board.ApplyMove(move);
                   await CheckGameState();
                   if (!IsGameOver)
                   {
                       await MakeAIMove();
                       await CheckGameState();
                   }
               }
           }

           DraggedPiecePosition = null;
           StateHasChanged();
       }
   }

   private async Task CheckGameState()
   {
       var currentColor = State.ActiveColor;
       var previousColor = currentColor == PieceColor.White ? PieceColor.Black : PieceColor.White;
       const string Message = "Jaque mate! {0} acaba de ganar!";

       if (Board.IsCheckmate(previousColor))
       {
           IsGameOver = true;
           GameOverMessage = string.Format(Message, currentColor);
       }
       else if (Board.IsCheckmate(currentColor))
       {
           IsGameOver = true;
           GameOverMessage = string.Format(Message, previousColor);
       }
       else if (Board.IsInCheck(currentColor))
       {
           // TO-DO: display a "Check!" message here
       }

       await Task.CompletedTask; // This is a placeholder to keep the method properly asynchronous without having to await on a non-existent async operation.
       StateHasChanged();
   }

   private async Task MakeAIMove()
   {
       if (!IsGameOver)
       {
           isThinking = true;
           StateHasChanged();

           var fen = Board.GetFEN();
           var bestMove = await StockfishService.GetBestMove(fen);

           await Task.Delay(1000);

           isThinking = false;
           StateHasChanged();

           var move = ChessMove.FromUci(bestMove);
           Board.ApplyMove(move);

           StateHasChanged();
       }
   }
}
